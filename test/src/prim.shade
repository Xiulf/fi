module Prim where

alias Byte = Uint8
alias Word = Int16
alias Long = Int64
alias Float = Float32
alias Double = Float64
alias Str = Slice Byte

-- [if(pointer_size = 16)] alias Int = Int16
-- [if(pointer_size = 32)] alias Int = Int32
[if(pointer_size = 64)] alias Int = Int64

-- [if(pointer_size = 16)] alias Uint = Uint16
-- [if(pointer_size = 32)] alias Uint = Uint32
[lang("uint")]
[if(pointer_size = 64)]
alias Uint = Uint64

[lang("type_kind"  )] data Type
[lang("figure_kind")] data Figure
[lang("symbol_kind")] data Symbol
[lang("row_kind"   )] data Row (t :: Type)

[repr("u8")]
[lang("bool")]
data Bool = False | True

[repr("u32" )]
[lang("char")]
data Char :: Type

[repr("u8"  )] data Uint8   :: Type
[repr("u16" )] data Uint16  :: Type
[repr("u32" )] data Uint32  :: Type
[repr("u64" )] data Uint64  :: Type
[repr("u128")] data Uint128 :: Type
[repr("i8"  )] data Int8    :: Type
[repr("i16" )] data Int16   :: Type
[repr("i32" )] data Int32   :: Type
[repr("i64" )] data Int64   :: Type
[repr("i128")] data Int128  :: Type
[repr("f32" )] data Float32 :: Type
[repr("f64" )] data Float64 :: Type

[lang("fn_ty")]
data Fn :: (Type, Type) -> Type

[lang("record_ty")]
data Record :: Row Type -> Type

[repr("ptr", valid_range = "1..")]
[lang("ptr_ty")]
data Ptr :: Type -> Type

[lang("array_ty")] data Array :: (Type, Figure) -> Type
[lang("slice_ty")] data Slice :: Type -> Type

[lang("integer_trait")] trait Integer t
[lang("decimal_trait")] trait Decimal t

impl integerU8   :: Integer Uint8
impl integerU16  :: Integer Uint16
impl integerU32  :: Integer Uint32
impl integerU64  :: Integer Uint64
impl integeru128 :: Integer Uint128
impl integerI8   :: Integer Int8
impl integerI16  :: Integer Int16
impl integerI32  :: Integer Int32
impl integerI64  :: Integer Int64
impl integerI128 :: Integer Int128

impl decimalF32 :: Decimal Float32
impl decimalF64 :: Decimal Float64

trait Unsafe
