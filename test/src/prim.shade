module Prim (Int, Ptr, Byte, Bool(True)) where

alias Byte = U8
alias Word = I16
alias Int = I32
alias Long = I64
alias Float = F32
alias Double = F64
alias Str = Slice Byte

[lang("type")] data Type

[repr("u8"  )]
[lang("bool")]
data Bool = False | True

[repr("u32" )] data Char :: Type
[repr("u8"  )] data U8   :: Type
[repr("u16" )] data U16  :: Type
[repr("u32" )] data U32  :: Type
[repr("u64" )] data U64  :: Type
[repr("u128")] data U128 :: Type
[repr("i8"  )] data I8   :: Type
[repr("i16" )] data I16  :: Type
[repr("i32" )] data I32  :: Type
[repr("i64" )] data I64  :: Type
[repr("i128")] data I128 :: Type
[repr("f32" )] data F32  :: Type
[repr("f64" )] data F64  :: Type

[repr("ptr")]
[lang("ptr")]
data Ptr :: forall (t :: Type). t -> Type

[lang("array")] data Array :: forall (t :: Type) i. Integer i => (t, i) -> Type
[lang("slice")] data Slice :: forall (t :: Type). t -> Type

[lang("integer")] iface Integer
[lang("decimal")] iface Decimal

impl IntegerU8   :: Integer U8
impl IntegerU16  :: Integer U16
impl IntegerU32  :: Integer U32
impl IntegerU64  :: Integer U64
impl Integeru128 :: Integer U128
impl IntegerI8   :: Integer I8
impl IntegerI16  :: Integer I16
impl IntegerI32  :: Integer I32
impl IntegerI64  :: Integer I64
impl IntegerI128 :: Integer I128

impl DecimalF32 :: Decimal F32
impl DecimalF64 :: Decimal F64
