module term (
    Term, Abs, Var, App,
    new, drop,
) =

import core

type Term =
    | Abs *Term
    | Var Int32
    | App *Term *Term

fun new t = do
    let size = intrinsics/size_of (Proxy :: Proxy Term)
    let ptr = intrinsics/alloc size :: *Term
    intrinsics/ptr_write ptr t
    ptr

fun drop (t :: *Term) = do
    let t' = intrinsics/ptr_read t

    case t' of
        Abs t -> drop t
        Var _ -> ()
        App a b -> do
            drop a
            drop b

    intrinsics/dealloc t

fun print ptr = do
    let t = intrinsics/ptr_read ptr

    case t of
        Abs t -> do
            io/print "(\\ "
            print t
            io/print ")"
        App a b -> do
            io/print "("
            print a
            io/print " "
            print b
            io/print ")"
        Var v ->
            io/print_i32 v

fun eval t = do
    let t' = intrinsics/ptr_read t

    case t' of
        App a b -> case intrinsics/ptr_read a of
            Abs a -> apply a b 0
            _ -> t
        _ -> t

fun apply base arg i = do
    let base' = intrinsics/ptr_read base

    case base' of
        Var i' -> do
            if intrinsics/eq_i32 i' i then arg else base
        App a b -> do
            let a = apply a arg i
            let b = apply b arg i
            intrinsics/dealloc base
            new $ App a b
        Abs t -> do
            let t = apply t arg (i + 1)
            intrinsics/dealloc base
            new $ Abs t
