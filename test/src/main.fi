module Main =

import Core
import Intrinsics


module C =
    import Core

    foreign malloc :: Uptr -> Ptr ()
    foreign free :: Ptr () -> ()
    foreign malloca :: Uptr -> Ptr ()

    @link_name = "_write"
    foreign write :: Int32, Ptr Int8, Uptr -> Int32


malloc () :: Ptr a = size_of (Proxy :: Proxy a) |> C.malloc |> transmute
free p = C.free <| transmute p


@main
main () =
    print "test\n"
    0


print f = Stdout .fmt f
eprint f = Stderr .fmt f


trait Format f =
    fmt :: w, f -> () where Write w

impl Format Str =
    fmt w s =
        _ = s.transmute |> write w


trait Write w =
    write :: w, Slice Int8 -> Int32

type Stdout = | Stdout
type Stderr = | Stderr

impl Write Stdout =
    write _ slice =
        ptr, len = slice.transmute
        C.write 1 ptr len

impl Write Stderr =
    write _ slice =
        ptr, len = slice.transmute
        C.write 2 ptr len
