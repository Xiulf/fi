module Main =

import Core
import Intrinsics


module C =
    import Core

    foreign malloc :: Uptr -> Ptr ()
    foreign free :: Ptr () -> ()
    foreign malloca :: Uptr -> Ptr ()

    foreign _write :: Int32, Ptr (), Uint32 -> Int32


malloc () :: Ptr a = C.malloc (size_of (Proxy :: Proxy a)) . transmute
free p = C.free (p . transmute)


@main
main () =
    printf "a" "b" "c" :: ()
    0


// printf fmt ..args =
//     ()

printstr s =
    ptr, len = transmute s :: Pair (Ptr Int8) Uptr
    ptr = transmute ptr
    len = iconvert len
    _ = C._write 1 ptr len


trait PrintF r =
    printf :: Str -> r

impl PrintF () =
    printf s = printstr s

impl PrintF ({Str} Str -> r) where PrintF r =
    printf s = fn x ->
        printstr s
        printf x
