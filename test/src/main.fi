module Main =

import Prim

@main
main = ()


fib x :: Int32 =
    match x with
    | 0 -> 0
    | 1 -> 1
    | n -> fib (n - 1) + fib (n - 2)


trait Add a =
    add :: a, a -> a

trait Sub a =
    sub :: a, a -> a

infixl 6 (+) = add
infixl 6 (-) = sub

impl Sub a where AnyInt a =
    sub = Intrinsics.isub


type Option t =
    | None
    | Some t

trait Monoid m =
    pure :: t -> m t

impl Monoid Option =
    pure = Some

trait Monad m where Monoid m =
    bind :: m a, (a -> m b) -> m b