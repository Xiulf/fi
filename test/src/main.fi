module Test =

import Core
import Data:Array as A
import Net as N

@main
main :: Result Str ()
main = try
    listener <- N:bind (LibC:NetAddr 127 0 0 1) 8080
    let _ = println "listening for incoming connections"
    stream <- listener .N:accept
    let _ = println "client connected"
    let buffer = A:zeroed :: Array 1000 Byte
    let slice = buffer .A:as_slice
    received <- stream .N:read slice
    stream .N:write (slice # (0..received))
    let _ = stream .N:close
    let _ = listener .N:close
    ret ()


println :: Str -> ()
println s =
    let ptr, len = cast s :: _, Int
    LibC:puts ptr
    ()


member (Result Str ()) of Termination =
    report (Ok _) = ExitCode 0
    report (Error e) =
        println e
        ExitCode -1


module Socket (module Socket, module C) =
    import Core
    import LibC (NetAddr)
    import LibC (NetAddr) as C
    import Intrinsics (addr_of)
    
    type Socket =
        | Socket LibC:C_Int LibC:SockAddr

    new_ipv4 :: NetAddr -> Uint16 -> Result Str Socket
    new_ipv4 addr port =
        let desc = LibC:socket LibC:AF_INET LibC:SOCK_STREAM 0
        if desc < 0 then return Error "error while creating socket"

        let family = cast LibC:AF_INET
        let port = Data:Int:to_be port
        let addr = LibC:SockAddr family port addr
        if LibC:bind desc (addr_of addr) 16 < 0 then return Error "couldn't bind socket"

        Ok $ Socket desc addr

    close :: Socket -> ()
    close (Socket desc _) =
        LibC:close desc
        ()

    listen :: Socket -> Int32 -> Result Str ()
    listen (Socket desc _) max_buffer =
        if LibC:listen desc max_buffer < 0 
        then Error "error while listening"
        else Ok ()

    accept :: Socket -> Result Str Socket
    accept (Socket desc _) =
        let size = 16 :: LibC:SocklenT
        let addr = Intrinsics:unsafe (Intrinsics:zeroed (Proxy :: Proxy LibC:SockAddr))
        let sock = LibC:accept desc (addr_of addr) (addr_of size)

        if sock < 0
        then Error "error accepting connection"
        else Ok $ Socket sock addr

    read :: Socket -> Slice Byte -> Result Str Uint
    read (Socket desc _) buffer =
        let buffer_addr, buffer_len = Intrinsics:unsafe (Intrinsics:transmute buffer)
        let bytes_received = LibC:recv desc buffer_addr buffer_len 0

        if bytes_received < 0
        then Error "error receiving"
        else Ok $ cast bytes_received

    write :: Socket -> Slice Byte -> Result Str Uint
    write (Socket desc _) buffer =
        let buffer_addr, buffer_len = Intrinsics:unsafe (Intrinsics:transmute buffer)
        let bytes_sent = LibC:send desc buffer_addr buffer_len 0

        if bytes_sent < 0
        then Error "error sending"
        else Ok $ cast bytes_sent


module Net =
    import Core
    import Socket (Socket)
    
    type IpAddr =
        | V4 Ipv4Addr
        | V6 Ipv6Addr

    type Ipv4Addr = | Ipv4Addr (Array 4 Byte)
    type Ipv6Addr = | Ipv6Addr (Array 16 Byte)

    type TcpListener = | TcpListener Socket
    type TcpStream   = | TcpStream   Socket

    class Close t =
        close :: t -> ()
    
    bind :: LibC:NetAddr -> Uint16 -> Result Str TcpListener
    bind addr port = try
        socket <- Socket:new_ipv4 addr port
        Socket:listen socket 128
        ret $ TcpListener socket

    accept :: TcpListener -> Result Str TcpStream
    accept (TcpListener socket) = try
        other <- Socket:accept socket
        ret $ TcpStream other

    read :: TcpStream -> Slice Byte -> Result Str Uint
    read (TcpStream socket) bytes = Socket:read socket bytes

    write :: TcpStream -> Slice Byte -> Result Str Uint
    write (TcpStream socket) bytes = Socket:write socket bytes

    member TcpListener of Close =
        close (TcpListener socket) = Socket:close socket

    member TcpStream of Close =
        close (TcpStream socket) = Socket:close socket


module Net:Ipv4Addr =
    import Net
    
    const UNSPECIFIED = Ipv4Addr [0, 0, 0, 0]
    const LOCALHOST = Ipv4Addr [127, 0, 0, 1]
    const BROADCAST = Ipv4Addr [255, 255, 255, 255]


module Net:Ipv6Addr =
    import Net
    
    const UNSPECIFIED = Ipv6Addr [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    const LOCALHOST = Ipv6Addr [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
