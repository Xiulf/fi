module Main (main) =

import Core
import Intrinsics


module C =
    import Core

    foreign malloc :: Uptr -> Ptr ()
    foreign free :: Ptr () -> ()

    foreign printf :: Ptr Int8, .. -> Int32

    @link_name = "_write"
    foreign write :: Int32, Ptr Int8, Uptr -> Int32


malloc () :: Ptr a = size_of (Proxy :: Proxy a) |> C.malloc |> transmute
free p = C.free <| transmute p


@main
main () =
    println "test"
    println "other"
    print   "two"
    println "three"
    0


print f = Stdout .fmt f
println f =
    Stdout .fmt f
    Stdout .fmt '\n'

eprint f = Stderr .fmt f
eprintln f =
    Stderr .fmt f
    Stderr .fmt '\n'


// printf (s :: Str) :: r where PrintfType r =
//     printf' s ()

// trait PrintfType t =
//     printf' :: Str, Slice Str -> t

// impl PrintfType () =
//     printf' fmt args = ()

// impl PrintfType ({Pair Str (Slice Str)} a -> r) where Format a, PrintfType r =
//     printf' fmt args = fn x ->
//         printf' fmt args


trait Format f =
    fmt :: w, f -> () where Write w

impl Format Str =
    fmt w s =
        _ = s.transmute |> write w

impl Format Char =
    fmt w c =
        ptr = addr_of c .transmute :: Ptr Int8
        slice = (ptr, (1 :: Uptr)) .transmute
        _ = write w slice


trait Write w =
    write :: w, Slice Int8 -> Int32

type Stdout = | Stdout
type Stderr = | Stderr

impl Write Stdout =
    write _ slice =
        ptr, len = slice.transmute
        C.write 1 ptr len

impl Write Stderr =
    write _ slice =
        ptr, len = slice.transmute
        C.write 2 ptr len
