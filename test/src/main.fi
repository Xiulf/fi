module Main (main) =

import Core
import Data.Foldable
import Intrinsics (array_slice)

main () =
    let arr = [4, 6, 8]
    let slice = array_slice arr 0 3
    fold slice 0 fn a b -> a + b


// trait Iterator it el =
//     next :: it -> it, Option el

// impl Iterator (Option t) t =
//     next self =
//         match self with
//         | Some x -> None, Some x
//         | None -> None, None

// type Filter it el f = | Filter 


// main () =
//     eval_state (increment ()) 5

// increment () = do
//     let state <- get ()
//     <- put (state + 1)
//     pure state

// type State s a = | State (s -> a, s)

// impl Monad (State s) =
//     bind (State f) g = State fn s ->
//         let x, s' = f s
//         let (State run) = g x
//         run s'

//     pure x = State fn s -> x, s

// eval_state (State f) s =
//     let result, _ = f s
//     result

// put s = State fn _ -> (), s
// get () = State fn s -> s, s
