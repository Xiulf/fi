module Test =

import Core

@main
main :: ()
main =
    let sockfd = LibC:socket LibC:AF_INET LibC:SOCK_STREAM 0
    if sockfd == -1 then do
        println "socket creation failed"
        return ()

    println "socket successfully created"
    let family = Intrinsics:iconvert LibC:AF_INET
    let servaddr = LibC:Sockaddr family [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80]
    let b = LibC:bind sockfd (Intrinsics:addr_of servaddr) 16
    if b != 0 then do
        println "socket bind failed"
        return ()

    println "socket successfully bound"
    let len = 16 :: LibC:SocklenT
    let cli = LibC:Sockaddr 0 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let connfd = LibC:accept sockfd (Intrinsics:addr_of cli) (Intrinsics:addr_of len)
    if connfd < 0 then do
        println "server accept failed"
        return ()

    println "server accepted the client"
    ; LibC:close sockfd
    ()


println :: Str -> ()
println s =
    let ptr, _ = Intrinsics:unsafe (Intrinsics:transmute s) :: _, Uint
    LibC:puts ptr
    ()
