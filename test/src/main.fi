module Test =

import Core
import Data:Range ((..))


@main
main :: ExitCode
main =
    let b = Box:new $ fib 8
    let x = Box:get b

    Box:drop b
    ExitCode x


fib i :: i -> i where Integer i
fib n if n < 2 = n
      else     = fib (n - 2) + fib (n - 1)


module Box =
    import Core
    import Intrinsics (ptr_read, ptr_write, size_of, transmute, unsafe)

    type Box t = | Box (Ptr t)
    
    new t :: t -> Box t
    new x = unsafe do
        let ptr = LibC:malloc (size_of (Proxy :: Proxy t))
        let ptr = transmute ptr
        ptr_write ptr x
        Box ptr
    
    copy t :: Box t -> Box t
    copy (Box ptr) = unsafe do
        let val = Intrinsics:copy (ptr_read ptr)
        new val
    
    drop t :: Box t -> ()
    drop (Box ptr) = unsafe do
        let val = ptr_read ptr
        Intrinsics:drop val
        let ptr = transmute ptr
        LibC:free ptr
    
    get t :: Box t -> t
    get (Box ptr) = unsafe $ Intrinsics:copy (ptr_read ptr)
    
    set t :: Box t -> t -> ()
    set (Box ptr) x = unsafe (ptr_write ptr x)
