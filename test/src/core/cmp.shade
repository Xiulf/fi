module Core.Cmp where

import Prim (Bool)
import Data.Semigroup
import Data.Monoid

trait Eq l r | l -> r, r -> l where
    fn eq :: (l, r) -> Bool

data Ordering = Lt | Eq | Gt

trait Eq l r => Ord l r | l -> r, r -> l where
    fn cmp :: (l, r) -> Ordering

impl eqOrdering :: Eq Ordering Ordering where
    fn eq Lt Lt = True
    fn eq Eq Eq = True
    fn eq Gt Gt = True
    fn eq _ _ = False

impl ordOrdering :: Ord Ordering Ordering where
    fn cmp Lt Lt = Eq
    fn cmp Lt _ = Lt
    fn cmp _ Lt = Gt
    fn cmp Gt Gt = Eq
    fn cmp Gt _ = Lt
    fn cmp _ Gt = Gt
    fn cmp Eq Eq = Eq

impl semigroupOrdering :: Semigroup Ordering where
    fn append Lt _ = Lt
    fn append Gt _ = Gt
    fn append Eq y = y
