module Data.List where

import Core.Cmp
import Data.Bool
import Data.Semigroup
import Data.Monoid

data List a
    = Cons a (List a)
    | Nil

-- impl listEq :: Eq a => Eq (List a) where
--     fn eq (Cons x xs) (Cons y ys) = and (eq x y) (eq xs ys)
--     fn eq Nil Nil = True
--     fn eq _ _ = False
-- 
-- impl monoidList :: Eq (List a) where
--     fn mempty = Nil
-- 
-- impl semigroupList :: Semigroup (List a) where
--     fn append (Cons x xs) ys = Cons x (append xs ys)
    -- fn append Nil ys = ys
