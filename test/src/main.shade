module main =

import core/io


fn main =
    a <- "test"
    println a

fn test = fn a b -> "test"


type Option t =
    | None
    | Some t

member Option of Applicative =
    fn pure a = Some a

; member Option of Functor =
;     fn map f a = case a of
;         None -> None
;         Some a -> Some $ f a


class Functor f =
    fn map :: (a -> b), f a -> f b

class Apply f where Functor f =
    fn apply :: f (a -> b), f a -> f b

class Applicative f where Apply f =
    fn pure :: a -> f a

class Bind m where Apply m =
    fn bind :: m a, (a -> m b) -> m b

class Monad m where Bind m, Applicative m


infixl 4 map as (<$>)
infixl 4 apply as (<*>)
infixl 1 bind as (>>=)
