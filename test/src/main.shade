module main (main) =

import core
import core/libc
import core/intrinsics (add_i32, sub_i32, ptr_offset, eq_i32)

fun main argc argv = do
    print_args argc argv
    0

fun print_args argc (argv :: C_Array C_Str) =
    unless eq_i32 argc 0 do
        puts argv.*
        print_args (sub_i32 argc 1) (ptr_offset argv 1)

fun nats = do
    a <- yield 1
    b <- yield 2
    c <- yield 3
    d <- yield 4
    add_i32 a (add_i32 b (add_i32 c d))

fun test =
    nats do |i|
        add_i32 i 1

fun print (s :: Str) = do
    (ptr, len) <- intrinsics/transmute s
    _ <- write STDOUT_FILENO ptr len
