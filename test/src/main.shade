module main =

import core
import core/io


fn main =
    bind (Ok "test" :: Result Str _) fn a -> pure (println a)


type Option t =
    | None
    | Some t

type Result e t =
    | Err e
    | Ok t


class Monad self =
    fn pure :: val -> self val
    fn bind :: self a, (a -> self b) -> self b


member Option of Monad =
    fn pure x = Some x

    fn bind self f = case self of
        Some x -> f x
        None -> None


member (Result e) of Monad =
    fn pure x = Ok x

    fn bind self f = case self of
        Ok x -> f x
        Err e -> Err e
