module main (main) =

import core
import core/libc
import core/intrinsics
import core/ops/add ((+))
import core/ops/sub ((-))
import core/ops/eq ((==))

fun main argc argv = do
    print_args argc argv
    0

fun print_args (argc :: Int32) (argv :: C_Array C_Str) =
    unless argc == 0 do
        puts argv.*
        print_args (argc - 1) (argv *+ 1)

fun nats = do
    a <- yield 1
    b <- yield 2
    c <- yield 3
    d <- yield 4
    a + b + c + d

fun test =
    nats do |(i :: Int32)|
        if i == 2
        then next 10
        else i + 1

fun print (s :: Str) = do
    (ptr, len) <- unsafe $ transmute s
    _ <- write STDOUT_FILENO ptr len
