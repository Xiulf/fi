module main =

import core
import core/io


fn main = try
    a <- None
    ret $ println a


type Option t =
    | None
    | Some t

type Result e t =
    | Err e
    | Ok t


@lang = "try-class"
class Try self =
    fn ret :: output -> self output
    fn bind :: self a, (a -> self b) -> self b

class OrElse self =
    fn or_else :: self val, val -> val

infixl 5 or_else as (!!)

member Option of Try =
    fn ret x = Some x

    fn bind self f = case self of
        Some x -> f x
        None -> None


member (Result e) of Try =
    fn ret x = Ok x

    fn bind self f = case self of
        Ok x -> f x
        Err e -> Err e
