module core/io =

import prim
import intrinsics (unsafe, transmute, ($))
import core/ops

class Write w =
    fn write :: w -> Slice Byte -> w

type Stdout =
    | Stdout

type Stderr =
    | Stderr

fn print (s :: Str) =
    let s = unsafe $ transmute s
    let _ = write Stdout s

fn println (s :: Str) =
    print s
    print "\n"

fn eprint (s :: Str) =
    let s = unsafe $ transmute s
    let _ = write Stderr s

fn eprintln (s :: Str) =
    eprint s
    eprint "\n"

member Stdout of Write =
    fn write s bytes =
        let (ptr, len) = unsafe $ transmute bytes
        c/write libc/STDOUT_FILENO ptr len
        s

member Stderr of Write =
    fn write s bytes =
        let (ptr, len) = unsafe $ transmute bytes
        c/write libc/STDERR_FILENO ptr len
        s

fn print_i32 i =
    if intrinsics/ge_i32 i 10
    do print_i32 $ i / 10

    let ch = i % 10
    let ch = ch + 48
    let addr = intrinsics/addr_of ch :: Ptr Int32
    let bytes = unsafe $ transmute (addr, (4 :: Uint))
    print bytes
