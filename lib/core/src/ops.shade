module Core.Ops =

import Prim ((->), Bool, True, False)
import Data.Bool (not)
import Core.Cmp

infixl 4 eq as (==)
infixl 4 ne as (!=)
infixl 4 lt as (<)
infixl 4 le as (<=)
infixl 4 gt as (>)
infixl 4 ge as (>=)

infixl 6 add as (+)
infixl 6 sub as (-)
infixl 7 mul as (*)
infixl 7 div as (/)
infixl 7 rem as (%)

infixl 6 concat as (++)
infixl 8 index as (#)

class Add lhs rhs out | lhs rhs -> out, lhs -> rhs =
    add :: lhs -> rhs -> out

class Sub lhs rhs out | lhs rhs -> out, lhs -> rhs =
    sub :: lhs -> rhs -> out

class Mul lhs rhs out | lhs rhs -> out, lhs -> rhs =
    mul :: lhs -> rhs -> out

class Div lhs rhs out | lhs rhs -> out, lhs -> rhs =
    div :: lhs -> rhs -> out

class Rem lhs rhs out | lhs rhs -> out, lhs -> rhs =
    rem :: lhs -> rhs -> out

class Concat lhs rhs | lhs -> rhs =
    concat :: lhs -> rhs -> lhs

class Index list idx out | list idx -> out, list -> idx =
    index :: list -> idx -> out
