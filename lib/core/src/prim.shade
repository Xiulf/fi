module Prim where

type Byte = Uint8
type Word = Int16
type Long = Int64
type Float = Float32
type Double = Float64
type Str = Slice Byte

-- [if(pointer_size = 16)] type Int = Int16
-- [if(pointer_size = 32)] type Int = Int32
[if(pointer_size = 64)] type Int = Int64

-- [if(pointer_size = 16)] type Uint = Uint16
-- [if(pointer_size = 32)] type Uint = Uint32
[lang("uint")]
[if(pointer_size = 64)]
type Uint = Uint64

[lang("type_kind"  )] type Type :: Type
[lang("figure_kind")] type Figure :: Type
[lang("symbol_kind")] type Symbol :: Type

[lang("row_kind"   )]
type Row :: Type -> Type
type Row (t :: Type)

[repr("u8")]
[lang("bool")]
type Bool =
    | False
    | True

[repr("u32" )]
[lang("char")]
type Char :: Type

[repr("u8"  )] type Uint8   :: Type
[repr("u16" )] type Uint16  :: Type
[repr("u32" )] type Uint32  :: Type
[repr("u64" )] type Uint64  :: Type
[repr("u128")] type Uint128 :: Type
[repr("i8"  )] type Int8    :: Type
[repr("i16" )] type Int16   :: Type
[repr("i32" )] type Int32   :: Type
[repr("i64" )] type Int64   :: Type
[repr("i128")] type Int128  :: Type
[repr("f32" )] type Float32 :: Type
[repr("f64" )] type Float64 :: Type

[lang("fn_ty")]
type Fn :: Type -> Type -> Type

[lang("record_ty")]
type Record :: Row Type -> Type

[repr("ptr", valid_range = "1..")]
[lang("ptr_ty")]
type Ptr :: Type -> Type

[lang("array_ty")] type Array :: Type -> Figure -> Type
[lang("slice_ty")] type Slice :: Type -> Type

[lang("integer_trait")] class Integer (t :: Type)
[lang("decimal_trait")] class Decimal (t :: Type)

instance integerU8   :: Integer Uint8
instance integerU16  :: Integer Uint16
instance integerU32  :: Integer Uint32
instance integerU64  :: Integer Uint64
instance integeru128 :: Integer Uint128
instance integerI8   :: Integer Int8
instance integerI16  :: Integer Int16
instance integerI32  :: Integer Int32
instance integerI64  :: Integer Int64
instance integerI128 :: Integer Int128

instance decimalF32 :: Decimal Float32
instance decimalF64 :: Decimal Float64

class Unsafe
