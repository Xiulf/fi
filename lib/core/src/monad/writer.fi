@cfg(skip)
module Monad:Writer =

import Core
import Core:Ops (Concat, concat)

class MonadWrite w m | m -> w where Try m = 
    write :: w -> m ()

type Writer w a = | Writer (a, w)

member w (Writer w) of MonadWrite where Default w, Concat w w =
    write x = Writer ((), x)

member (Writer w) of Try where Default w, Concat w w =
    ret x = Writer (x, default)
    
    bind (Writer (a, w)) f =
        let (a', w') = runWriter (f a)
        Writer (a', concat w w')

runWriter :: forall w a. Writer w a -> (a, w)
runWriter (Writer x) = x