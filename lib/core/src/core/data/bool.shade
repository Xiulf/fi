module Data.Bool (module Data.Bool, module B) where

import Prim (Bool(..)) as B
import Prim (Bool(..))
import Core.Cmp

fn not False = True
fn not True = False

fn and False _ = False
fn and True b = b

fn or False b = b
fn or True _ = True

instance eqBool :: Eq Bool Bool where
    fn eq True x = x
    fn eq False x = not x

instance ordBool :: Ord Bool Bool where
    fn cmp False True = Lt
    fn cmp True False = Gt
    fn cmp _ _ = Eq
