module Data.Slice (len) =

import Core
import Core.Ops (Index, index)
import Data.Foldable
import Intrinsics (ilt, transmute, ptr_load, ptr_offset)

len (slice :: ref Slice t) :: Int i =
    _, len = transmute slice :: Ptr t, Uptr
    cast len

impl Index (Slice t) (Int i) t =
    index slice idx =
        ptr, len = transmute slice :: Ptr t, Uptr
        ptr = ptr_offset ptr idx
        cast ptr

impl Foldable (ref(a') Slice t) t =
    fold slice init f =
        _fold 0 slice init f

_fold (i :: Int32) (slice :: ref(a') Slice t) init f =
    if i `ilt` len slice then
        slice2 = transmute slice
        acc = f init (slice2#i)
        recur (i + 1) slice acc f
    else
        init
