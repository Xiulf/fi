module Data.Slice (len) =

import Core
import Core.Ops (Index, index)
import Data.Foldable
import Intrinsics (ilt, transmute, ptr_load, ptr_offset)

len (slice :: Slice t) :: Int i =
    let _, len = transmute slice :: Ptr t, Uptr
    cast len

impl Index (Slice t) (Int i) t =
    index slice idx =
        let ptr, len = transmute slice :: Ptr t, Uptr
        let ptr = ptr_offset ptr idx
        ptr_load ptr

impl Foldable (Slice t) t =
    fold slice init f =
        _fold 0 slice init f

_fold i slice init f =
    if i `ilt` len slice then
        let acc = f init (slice#i)
        recur (i + 1) slice acc f
    else
        init
