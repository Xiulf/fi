module Data:Array =

import Core
import Data:Range (Range, (..))


zeroed len t :: Array len t
zeroed = Intrinsics:unsafe (Intrinsics:zeroed (Proxy :: Proxy (Array len t)))

member (Array len t) (Slice t) of Into =
    into arr = arr # (0..(Intrinsics:array_len arr))

member (Array len t) Int t of Core:Ops:Index =
    index arr idx = Intrinsics:array_index arr idx

member (Array len t) (Range Int) (Slice t) of Core:Ops:Index =
    index arr (Range s e) = Intrinsics:array_slice arr s e
