module Data.List =

import Core
import Core.Ops (Index, index)
import Data.Foldable

@boxed
type List t =
    | Nil
    | Cons t (List t)

infixr 6 (:) = Cons

len list =
    match list with
    | Nil -> 0
    | Cons x xs -> 1 + (len xs)

// impl Index (List t) (Int i) t =
//     index list idx =
//         Intrinsics.undefined
        // match list, idx with
        // | Nil, _ -> panic "index out of bounds"
        // | x:xs, 0 -> x
        // | _:xs, _ -> index xs (idx - 1)

impl Foldable (List t) t =
    fold list init f =
        match list with
        | x:xs ->
            acc = f init x
            fold xs acc f
        | _ -> init
