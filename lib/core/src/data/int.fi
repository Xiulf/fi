module Data:Int =

import Core
import Core:Ops
import Core:Cmp
    
@cfg(target_endian = "big")
to_be i :: i -> i where Integer i
to_be x = x

@cfg(not(target_endian = "big"))
to_be i :: i -> i where Integer i
to_be x = Intrinsics:byteswap x
    
@cfg(target_endian = "little")
to_le i :: i -> i where Integer i
to_le x = x

@cfg(not(target_endian = "little"))
to_le i :: i -> i where Integer i
to_le x = Intrinsics:byteswap x

@cfg(target_endian = "big")
from_be i :: i -> i where Integer i
from_be x = x

@cfg(not(target_endian = "big"))
from_be i :: i -> i where Integer i
from_be x = Intrinsics:byteswap x

@cfg(target_endian = "little")
from_le i :: i -> i where Integer i
from_le x = x

@cfg(not(target_endian = "little"))
from_le i :: i -> i where Integer i
from_le x = Intrinsics:byteswap x

member i of Default where Integer i =
    default = 0

member i i i of Add where Integer i =
    add a b = Intrinsics:iadd a b

member i i i of Sub where Integer i =
    sub a b = Intrinsics:isub a b

member i i i of Mul where Integer i =
    mul a b = Intrinsics:imul a b

member i i i of Div where Integer i =
    div a b = Intrinsics:idiv a b

member i i i of Rem where Integer i =
    rem a b = Intrinsics:irem a b

member i i of Eq where Integer i =
    eq a b = Intrinsics:ieq a b

member i i of Ord where Integer i =
    cmp a b if Intrinsics:ilt a b = Lt
            if Intrinsics:ieq a b = Eq
            else                  = Gt
