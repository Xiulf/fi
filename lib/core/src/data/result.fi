module Data:Result =

@cfg(skip)
import Core:Error (Try, Unwrap)
@cfg(skip)
import Core:Mappable
@cfg(skip)
import Data:Option (Some, None)
@cfg(skip)
import Prim (ExitCode, Termination, report)
@cfg(skip)
import Intrinsics (crash)

type Result e t =
    | Error e
    | Ok t

@cfg(skip)
ok (Ok x) = Some x
ok (Error _) = None

@cfg(skip)
err (Error e) = Some e
err (Ok _) = None

@cfg(skip)
unwrap_err (Error e) = e
unwrap_err (Ok _) = crash "cannot unwrap_err an ok value"

@cfg(skip)
member (Result e t) of Termination where Termination t =
    report (Ok v) = report v
    report (Error e) = ExitCode 1

@cfg(skip)
member (Result e) of Try =
    ret x = Ok x

    bind (Ok x) f = f x
    bind (Error e) _ = Error e

@cfg(skip)
member (Result e) of Unwrap =
    unwrap (Ok x) = x
    unwrap (Error _) = crash "cannot unwrap an err value"

    unwrap_or (Ok x) _ = x
    unwrap_or (Error _) def = def

@cfg(skip)
member (Result e) of Mappable =
    map (Ok x) f = Ok (f x)
    map (Error e) _ = Error e
