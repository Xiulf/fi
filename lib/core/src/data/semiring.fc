module semiring =

--| The `Semiring` type class is for types that support an addition and multiplication operation.
--| Instances must satisfy the following laws:
--| - Commutative monoid under addition:
--|     - Associativity: (a + b) + c = a + (b + c)
--|     - Identity: zero + a = a + zero = a
--|     - Commutativity: a + b = b + a
--| - Monoid under multiplication:
--|     - Associativity: (a * b) * c = a * (b * c)
--|     - Identity: one * a = a * one = a
--| - Multiplication distributes over addition:
--|     - Left distributivity: a * (b + c) = (a * b) + (a * c)
--|     - Right distributivity: (a + b) * c = (a * c) + (b * c)
--| - Annihilation: zero * a = a * zero = zero
class Semiring a =
    fun add :: a -> a -> a
    fun mul :: a -> a-> a

    fun zero :: a
    fun one :: a
