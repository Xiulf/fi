module LibC =

import Prim
import Intrinsics (unsafe, transmute)

type C_Char    = Int8
type C_Short   = Int16
type C_UShort  = Uint16
type C_Int     = Int32
type C_Long    = Int64
type C_Float   = Float32
type C_Double  = Float64
type C_Str     = Ptr C_Char
type C_Array t = Ptr t

type SizeT  = Uint
type SsizeT = Int

foreign type C_Void :: Type

const NULL :: forall t. Ptr t
const NULL = unsafe (transmute (0 :: Uint))

const STDIN_FILENO  = 0 :: C_Int
const STDOUT_FILENO = 1 :: C_Int
const STDERR_FILENO = 2 :: C_Int

const AF_INET = 2 :: C_Int
const SOCK_STREAM = 1 :: C_Int

; io
foreign puts :: C_Str -> C_Int
foreign write :: C_Int -> Ptr C_Char -> SizeT -> SsizeT

; mem
foreign malloc :: SizeT -> Ptr C_Void
foreign free :: Ptr C_Void -> ()
foreign memcpy :: Ptr C_Void -> Ptr C_Void -> Uint -> Ptr C_Void
foreign memmove :: Ptr C_Void -> Ptr C_Void -> Uint -> Ptr C_Void

; sockets
type SocklenT = Int32
type SockAddr = | SockAddr C_Short C_UShort NetAddr
type NetAddr  = | NetAddr Uint8 Uint8 Uint8 Uint8

foreign socket :: C_Int -> C_Int -> C_Int -> C_Int
foreign bind   :: C_Int -> Ptr SockAddr -> SocklenT -> C_Int
foreign listen :: C_Int -> C_Int -> C_Int
foreign accept :: C_Int -> Ptr SockAddr -> Ptr SocklenT -> C_Int
foreign close  :: C_Int -> C_Int
foreign recv   :: C_Int -> Ptr C_Char -> Uint -> C_Int -> C_Int
foreign send   :: C_Int -> Ptr C_Char -> Uint -> C_Int -> C_Int

;; convert the short from host byte order to network byte order
foreign htons :: C_UShort -> C_UShort
