module Intrinsics =

import Prim

infixr 0 apply as ($)
infixl 1 applyFlipped as (.)

@intrinsic foreign iadd i :: i -> i -> i where Integer i
@intrinsic foreign isub i :: i -> i -> i where Integer i
@intrinsic foreign imul i :: i -> i -> i where Integer i
@intrinsic foreign idiv i :: i -> i -> i where Integer i
@intrinsic foreign irem i :: i -> i -> i where Integer i
@intrinsic foreign ieq  i :: i -> i -> Bool where Integer i
@intrinsic foreign ine  i :: i -> i -> Bool where Integer i
@intrinsic foreign ilt  i :: i -> i -> Bool where Integer i
@intrinsic foreign ile  i :: i -> i -> Bool where Integer i
@intrinsic foreign igt  i :: i -> i -> Bool where Integer i
@intrinsic foreign ige  i :: i -> i -> Bool where Integer i

@intrinsic foreign byteswap   i :: i -> i where Integer i
@intrinsic foreign bitreverse i :: i -> i where Integer i

@intrinsic foreign iconvert a b :: a -> b where Integer a, Integer b

@intrinsic foreign array_index t l i :: Array l t -> i -> t where Integer i
@intrinsic foreign array_slice t l i :: Array l t -> i -> i -> Slice t where Integer i
@intrinsic foreign array_len   t l   :: Array l t -> Int

@intrinsic foreign box_alloc t :: Uint -> Box t
@intrinsic foreign box_free  t :: Box t -> Unit

@intrinsic foreign addr_of    ptr to :: to -> ptr where Pointer ptr to
@intrinsic foreign ptr_offset ptr to :: ptr -> Int -> ptr where Pointer ptr to
@intrinsic foreign ptr_read   ptr to :: ptr -> to where Pointer ptr to, Unsafe
@intrinsic foreign ptr_write  ptr to :: ptr -> to -> Unit where Pointer ptr to, Unsafe

@intrinsic foreign size_of   t :: Proxy t -> Uint
@intrinsic foreign align_of  t :: Proxy t -> Uint
@intrinsic foreign stride_of t :: Proxy t -> Uint

@intrinsic foreign copy t :: t -> t
@intrinsic foreign drop t :: t -> () where Unsafe

@intrinsic foreign zeroed t :: Proxy t -> t where Unsafe

@intrinsic foreign apply        a r :: (a -> r) -> a -> r
@intrinsic foreign applyFlipped a r :: a -> (a -> r) -> r
@intrinsic foreign transmute    a b :: a -> b where Unsafe
@intrinsic foreign crash            :: Str -> Never where Partial

@identity foreign unsafe  a :: (a where Unsafe) -> a
@identity foreign partial a :: (a where Partial) -> a
