module Intrinsics =

import Prim

infixr 0 apply as ($)
infixl 1 applyFlipped as (.)

@intrinsic foreign iadd :: forall i. i -> i -> i where Integer i
@intrinsic foreign isub :: forall i. i -> i -> i where Integer i
@intrinsic foreign imul :: forall i. i -> i -> i where Integer i
@intrinsic foreign idiv :: forall i. i -> i -> i where Integer i
@intrinsic foreign irem :: forall i. i -> i -> i where Integer i
@intrinsic foreign ieq  :: forall i. i -> i -> Bool where Integer i
@intrinsic foreign icmp :: forall i. i -> i -> Int where Integer i
@intrinsic foreign iconvert :: forall a b. a -> b where Integer a, Integer b

@intrinsic foreign array_index :: forall t l i. Array l t -> i -> t where Integer i
@intrinsic foreign array_slice :: forall t l i. Array l t -> i -> i -> Slice t where Integer i

@intrinsic foreign box_alloc :: forall t. Uint -> Box t
@intrinsic foreign box_free  :: forall t. Box t -> Unit

@intrinsic foreign addr_of    :: forall ptr to. to -> ptr where Pointer ptr to
@intrinsic foreign ptr_offset :: forall ptr to. ptr -> Int -> ptr where Pointer ptr to
@intrinsic foreign ptr_read   :: forall ptr to. ptr -> to where Pointer ptr to
@intrinsic foreign ptr_write  :: forall ptr to. ptr -> to -> Unit where Pointer ptr to

@intrinsic foreign size_of :: forall t. Proxy t -> Uint

@intrinsic foreign apply        :: forall a r. (a -> r) -> a -> r
@intrinsic foreign applyFlipped :: forall a r. a -> (a -> r) -> r
@intrinsic foreign transmute    :: forall a b. a -> b where Unsafe
@intrinsic foreign unsafe       :: forall a. (a where Unsafe) -> a
@intrinsic foreign crash        :: Str -> Never where Partial
@intrinsic foreign partial      :: forall a. (a where Partial) -> a
