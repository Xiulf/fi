module prim =

@lang = "kind-kind"   type Kind   :: Kind
@lang = "type-kind"   type Type   :: Kind
@lang = "figure-kind" type Figure :: Kind
@lang = "symbol-kind" type Symbol :: Kind
@lang = "row-kind"    type Row    :: Kind -> Kind

@lang = "fn-type"     type Fn             :: Type -> Type -> Type
@lang = "ptr-type"    type Ptr            :: Type -> Type
@lang = "ptrb-type"   type BufPtr         :: Type -> Type
@lang = "ptrbs-type"  type BufPtrSentinel :: Type -> Figure -> Type
@lang = "array-type"  type Array          :: Type -> Figure -> Type
@lang = "slice-type"  type Slice          :: Type -> Type
@lang = "record-type" type Record         :: Row Type -> Type

type Int8    :: Type
type Int16   :: Type
type Int32   :: Type
type Int64   :: Type
type Int128  :: Type
type Uint8   :: Type
type Uint16  :: Type
type Uint32  :: Type
type Uint64  :: Type
type Uint128 :: Type
type Float32 :: Type
type Float64 :: Type

type Bool =
    | False
    | True

@lang = "integer-class" class Integer t
@lang = "decimal-class" class Decimal t

instance Integer Int8
instance Integer Int16
instance Integer Int32
instance Integer Int64
instance Integer Int128
instance Integer Uint8
instance Integer Uint16
instance Integer Uint32
instance Integer Uint64
instance Integer Uint128

instance Decimal Float32
instance Decimal Float64

class Unsafe
