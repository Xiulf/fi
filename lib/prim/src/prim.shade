module prim =

@lang = "kind-kind"   foreign type Kind   :: Kind
@lang = "type-kind"   foreign type Type   :: Kind
@lang = "figure-kind" foreign type Figure :: Kind
@lang = "symbol-kind" foreign type Symbol :: Kind
@lang = "row-kind"    foreign type Row    :: Kind -> Kind

@lang = "fn-type"     foreign type Fn             :: Type -> Type -> Type
@lang = "ptr-type"    foreign type Ptr            :: Type -> Type
@lang = "ptrb-type"   foreign type BufPtr         :: Type -> Type
@lang = "ptrbs-type"  foreign type BufPtrSentinel :: Type -> Figure -> Type
@lang = "array-type"  foreign type Array          :: Type -> Figure -> Type
@lang = "slice-type"  foreign type Slice          :: Type -> Type
@lang = "record-type" foreign type Record         :: Row Type -> Type

foreign type Int8    :: Type
foreign type Int16   :: Type
foreign type Int32   :: Type
foreign type Int64   :: Type
foreign type Int128  :: Type
foreign type Uint8   :: Type
foreign type Uint16  :: Type
foreign type Uint32  :: Type
foreign type Uint64  :: Type
foreign type Uint128 :: Type
foreign type Float32 :: Type
foreign type Float64 :: Type

type Bool =
    | False
    | True

@lang = "integer-class" class Integer t
@lang = "decimal-class" class Decimal t

instance Integer Int8
instance Integer Int16
instance Integer Int32
instance Integer Int64
instance Integer Int128
instance Integer Uint8
instance Integer Uint16
instance Integer Uint32
instance Integer Uint64
instance Integer Uint128

instance Decimal Float32
instance Decimal Float64

class Unsafe
