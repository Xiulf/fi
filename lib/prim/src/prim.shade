module prim =

@lang = "kind-kind"   foreign type Kind   :: Kind
@lang = "type-kind"   foreign type Type   :: Kind
@lang = "figure-kind" foreign type Figure :: Kind
@lang = "symbol-kind" foreign type Symbol :: Kind
@lang = "row-kind"    foreign type Row    :: Kind -> Kind

@lang = "never-type"
@repr(uninhabited)
foreign type Never :: Type

@lang = "char-type"
@repr(scalar = "u32", valid_range_end = 0x10FFFF)
foreign type Char :: Type

@lang = "str-type"
@repr(
    scalar_first("ptr", valid_range_start = 1),
    scalar_second("ptr_sized_uint"),
    elem(scalar = "u8"),
)
foreign type Str :: Type

@lang = "fn-type"
@repr(scalar = "ptr", valid_range_start = 1)
foreign type Fn :: Type -> Type -> Type

@lang = "ptr-type"
@repr(scalar = "ptr", valid_range_start = 1, elem = 0)
foreign type Ptr :: Type -> Type

@lang = "ptrb-type"
@repr(scalar = "ptr", valid_range_start = 1, elem = 0)
foreign type BufPtr :: Type -> Type

@lang = "ptrbs-type"
@repr(scalar = "ptr", valid_range_start = 1, elem = 0)
foreign type BufPtrSentinel :: Type -> Figure -> Type

@lang = "array-type"
@repr(elem = 0, array(len = 1))
foreign type Array :: Type -> Figure -> Type

@lang = "slice-type"
@repr(
    scalar_first("ptr", valid_range_start = 1),
    scalar_second("ptr"),
    elem = 0,
)
foreign type Slice :: Type -> Type

@lang = "record-type"
@repr(record(fields = 0))
foreign type Record :: Row Type -> Type

@lang = "block-type"
foreign type Block :: Type -> Type -> Type

@repr(scalar = "ptr_sized_int" ) foreign type Int  :: Type
@repr(scalar = "ptr_sized_uint") foreign type Uint :: Type

@repr(scalar = "i8"  ) foreign type Int8    :: Type
@repr(scalar = "i16" ) foreign type Int16   :: Type
@repr(scalar = "i32" ) foreign type Int32   :: Type
@repr(scalar = "i64" ) foreign type Int64   :: Type
@repr(scalar = "i128") foreign type Int128  :: Type

@repr(scalar = "u8"  ) foreign type Uint8   :: Type
@repr(scalar = "u16" ) foreign type Uint16  :: Type
@repr(scalar = "u32" ) foreign type Uint32  :: Type
@repr(scalar = "u64" ) foreign type Uint64  :: Type
@repr(scalar = "u128") foreign type Uint128 :: Type

@repr(scalar = "f32") foreign type Float32 :: Type
@repr(scalar = "f64") foreign type Float64 :: Type

type Unit = ()

@lang = "bool-type"
type Bool =
    | False
    | True

@lang = "integer-class" class Integer t | -> t
@lang = "decimal-class" class Decimal t | -> t
@lang = "pointer-class" class Pointer t to | t -> to

@default
instance Integer Int
instance Integer Uint

instance Integer Int8
instance Integer Int16
instance Integer Int32
instance Integer Int64
instance Integer Int128
instance Integer Uint8
instance Integer Uint16
instance Integer Uint32
instance Integer Uint64
instance Integer Uint128

@default
instance Decimal Float32
instance Decimal Float64

instance Pointer (Ptr t) t
instance Pointer (BufPtr t) t
instance Pointer (BufPtrSentinel t s) t

class Unsafe
class Partial
