module intrinsics =

import prim

infixr 0 apply as ($)

@intrinsic foreign fn iadd :: i, i -> i where Integer i
@intrinsic foreign fn isub :: i, i -> i where Integer i
@intrinsic foreign fn imul :: i, i -> i where Integer i
@intrinsic foreign fn idiv :: i, i -> i where Integer i
@intrinsic foreign fn irem :: i, i -> i where Integer i

@intrinsic foreign fn eq_i32 :: Int32, Int32 -> Bool
@intrinsic foreign fn ge_i32 :: Int32, Int32 -> Bool

; @intrinsic foreign fn iconvert :: a -> b where Integer a, Integer b
@intrinsic foreign fn u32_to_u8 :: Uint32 -> Uint8

@intrinsic foreign fn alloc   :: Uint -> ptr where Pointer ptr to
@intrinsic foreign fn dealloc :: ptr -> () where Pointer ptr to

@intrinsic foreign fn size_of :: Proxy t -> Uint

@intrinsic foreign fn addr_of    :: to -> ptr where Pointer ptr to
@intrinsic foreign fn ptr_offset :: ptr, Int -> ptr where Pointer ptr to
@intrinsic foreign fn ptr_read   :: ptr -> to where Pointer ptr to
@intrinsic foreign fn ptr_write  :: ptr, to -> () where Pointer ptr to

@intrinsic foreign fn apply         :: (a -> r), a -> r
@intrinsic foreign fn transmute     :: a -> b where Unsafe
@intrinsic foreign fn unsafe        :: (a where Unsafe) -> a
@intrinsic foreign fn crash         :: a where Partial
@intrinsic foreign fn unsafePartial :: (a where Partial) -> a
