module Prim =

@lang = "type-kind"   foreign type Type   :: Type
@lang = "figure-kind" foreign type Figure :: Type
@lang = "symbol-kind" foreign type Symbol :: Type
@lang = "row-kind"    foreign type Row    :: Type -> Type

foreign type Effect :: Type -> Type

@lang = "never-type"
@repr(uninhabited)
foreign type Never :: Type

@lang = "char-type"
@repr(scalar = "u32", valid_range_end = 0x10FFFF)
foreign type Char :: Type

@lang = "str-type"
@repr(fatptr(elem(scalar = "u8")), valid_range_start = 1)
foreign type Str :: Type

@lang = "fn-type"
@repr(func(arg = 0, ret = 1))
foreign type Fn :: Type -> Type -> Type

infixr 1 Fn as (->)

@lang = "box-type"
@repr(box(elem = 0))
foreign type Box :: Type -> Type

@lang = "ptr-type"
@repr(ptr(elem = 0))
foreign type Ptr :: Type -> Type

@lang = "ptrb-type"
@repr(ptr(elem = 0))
foreign type BufPtr :: Type -> Type

@lang = "ptrbs-type"
@repr(ptr(elem = 0))
foreign type BufPtrSentinel :: Type -> Figure -> Type

@lang = "array-type"
@repr(array(elem = 1, len = 0))
foreign type Array :: Figure -> Type -> Type

@lang = "slice-type"
@repr(fatptr(elem = 0), valid_range_start = 1)
foreign type Slice :: Type -> Type

@lang = "record-type"
@repr(record(fields = 0))
foreign type Record :: Row Type -> Type

@repr(scalar = "isize") foreign type Int  :: Type
@repr(scalar = "usize") foreign type Uint :: Type

@repr(scalar = "i8"  ) foreign type Int8    :: Type
@repr(scalar = "i16" ) foreign type Int16   :: Type
@repr(scalar = "i32" ) foreign type Int32   :: Type
@repr(scalar = "i64" ) foreign type Int64   :: Type
@repr(scalar = "i128") foreign type Int128  :: Type

@repr(scalar = "u8"  ) foreign type Uint8   :: Type
@repr(scalar = "u16" ) foreign type Uint16  :: Type
@repr(scalar = "u32" ) foreign type Uint32  :: Type
@repr(scalar = "u64" ) foreign type Uint64  :: Type
@repr(scalar = "u128") foreign type Uint128 :: Type

@repr(scalar = "f32") foreign type Float32 :: Type
@repr(scalar = "f64") foreign type Float64 :: Type

type Byte = Int8
type Float = Float32
type Double = Float64

@lang = "unit-type"
type Unit =
    | Unit

@lang = "bool-type"
type Bool =
    | False
    | True

@lang = "proxy-type"
type Proxy a =
    | Proxy

@lang = "pair-type"
type Pair a b =
    | Pair a b

@lang = "pair-operator"
infixr 0 Pair as (,)

@lang = "integer-class" class Integer t | -> t
@lang = "decimal-class" class Decimal t | -> t
@lang = "pointer-class" class Pointer t to | t -> to
class FatPointer t to meta | t -> to, t -> meta

@default
member Int of Integer
member Uint of Integer

member Int8 of Integer 
member Int16 of Integer
member Int32 of Integer
member Int64 of Integer
member Int128 of Integer
member Uint8 of Integer
member Uint16 of Integer
member Uint32 of Integer
member Uint64 of Integer
member Uint128 of Integer

@default
member Float32 of Decimal
member Float64 of Decimal

member (Ptr t) t of Pointer
member (BufPtr t) t of Pointer
member (BufPtrSentinel t s) t of Pointer

member Str Byte Uint of FatPointer
member (Slice t) t Uint of FatPointer

class Unsafe
class Partial
class Effectful

class Warn msg where msg :: Symbol

type Infallible :: Type

; @lang = "try-class"
; class Try self =
;     ret :: forall output. output -> self output
;     bind :: forall a b. self a -> (a -> self b) -> self b

@lang = "try-class"
class Try t =
    ret o :: o -> t o
    branch o :: t o -> ControlFlow (t Infallible) o

@lang = "controlflow-type"
type ControlFlow b c =
    | Break b
    | Continue c

type ExitCode = | ExitCode Int32

@lang = "termination-class"
class Termination t =
    report :: t -> ExitCode

member Unit of Termination =
    report _ = ExitCode 0

member ExitCode of Termination =
    report code = code
